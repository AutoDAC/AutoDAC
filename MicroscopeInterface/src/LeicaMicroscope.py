import time
import os.path
import platform


class LeicaMicroscope:
    def __init__(self, ui, experiment_path):
        """
        Create object that handles LAS interaction

        :param ui: UI object containing interactable components
        :param experiment_path: Path to .lif file to analyse
        """
        self.ui = ui
        self.X_MOVE_STEP = 10
        self.Y_MOVE_STEP = 10
        # experiment_path is the file path to lif file, generated by LAS
        self.experiment_path = experiment_path
        self.working_dir = self.generate_dir("working_dir")
        self.result_dir = self.generate_dir("result_dir")
        self.rgb_images = []

    def generate_dir(self, dir_name):
        """
        Create directory with given name at the same level as the experiment path

        :param dir_name: name of the directory to be created
        :return: Path to newly created directory
        """
        path = os.path.dirname(self.experiment_path)
        new_dir_path = os.path.join(path, dir_name)
        if not os.path.exists(new_dir_path):
            os.makedirs(new_dir_path)

        return new_dir_path

    def __move_x(self, x, relative=True):
        """
        Move microscope in x direction

        :param x:        position or relative position to move microscope
        :param relative: default true, make movement relative
        :return None
        """
        for i in range(0, abs(x)):
            if relative and x > 0:
                self.ui.click_right_button()
            elif relative and x < 0:
                self.ui.click_left_button()

    def __move_y(self, y, relative=True):
        """
        Move microscope in y direction

        :param y:        position or relative position to move microscope
        :param relative: default true, make movement relative
        :return: None
        """
        for i in range(0, abs(y)):
            if relative and y > 0:
                self.ui.click_forwards_button()
            elif relative and y < 0:
                self.ui.click_backwards_button()

    def move_left(self):
        self.__move_x(-self.X_MOVE_STEP, relative=True)

    def move_right(self):
        self.__move_x(self.X_MOVE_STEP, relative=True)

    def move_forwards(self):
        self.__move_y(self.Y_MOVE_STEP, relative=True)

    def move_backwards(self):
        self.__move_y(-self.Y_MOVE_STEP, relative=True)

    def take_picture(self):
        """
        Take picture at location

        :return: picture location
        """
        self.ui.click_acquisition_tab()
        self.ui.click_seq_button()
        self.ui.click_start_button()

        # wait until z-stack is taken - guess 10 seconds
        time.sleep(10)

        self.ui.click_experiments_tab()
        return self.experiment_path

    def tile_scan(self):
        """
        Take tilescan

        :return: None
        """
        self.ui.click_start_button()
        time.sleep(60 * 5)  # Approximate tilescan duration - 5 minutes
        self.ui.click_experiments_tab()
        self.ui.click_save_button()
